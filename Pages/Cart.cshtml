@page
@model CartModel
@{
    ViewData["Title"] = "Cart";
}
<div>

		<div class="row" style="margin-top:3em;">
			<div class="col-md-4">
				<form>
				Recipient:<br>
				<input type="text" name="address"><br>
				Shipping Address:<br>
				<input type="text" name="address"><br>
				City:<br>
				<input type="text" name="city"><br>
				State:<br>
				<input type="text" name="state"><br>
				Zip Code:<br>
				<input type="text" name="zip"><br>
				
				<!-- <input type="input" class="form-control input-sm" placeholder="Extra Donation?"> -->
				</form>
            	<div style="padding-left:5px; padding-top:5px;" id="paypal-button-container"></div>
			</div>
            <div class="col-md-8">
				@{
				double sum = 0.0;

				if(@Model.Item.LongCount() == 0){
				<div class="emptyCart">
					<p>  Your cart is empty !</p>
				</div>
				}
				else {
					<table style="width:100%" id="cartTable">
					<thead>
					<tr>
						<th>Name</th>
						<th>Price</th> 
					</tr>
					</thead>
					<tbody>
			@foreach(var item in Model.Item) {
				sum += item.Price;
					<tr>
						<td>@Html.DisplayFor(modelItem => item.Name)</td>
						<td>@Html.DisplayFor(modelItem => item.Price)</td> 
						<td><input type="button" value="delete" onclick="deleteItem(this, @item.ID)"></td>
					</tr>
				}

			</tbody>
			</table>
			<div>
			<input type="button" value="clear cart" onclick="clearCart()">
			</div>
				}
        
				}
		<!-- $("#tableId > tbody").empty(); -->
		
            </div>
		</div>
	<script src="https://www.paypalobjects.com/api/checkout.js"></script>
    <script>
        paypal.Button.render({

            env: 'sandbox', 

			style: {
				size: 'small', 
				color: 'blue', 
				shape: 'rect', 
				label: 'pay'
			},

            client: {
                sandbox:    'ARnxrzinsUt9h6pn_jjeOW4S-_BS7GPJiBuPoW5Zg2LId97AFnkgAnglPWPhXfbNjGEii1-3X8CkSYGD',
                production: '<insert production client id>'
            },

            commit: true,

            payment: function(data, actions) {

                return actions.payment.create({
                    payment: {
                        transactions: [
                            {
                                amount: { total: "@sum", currency: 'USD' }
                            }
                        ]
                    }
                });
            },

            onAuthorize: function(data, actions) {

                return actions.payment.execute().then(function() {
                    window.alert('Payment Complete!');
                });

				return actions.payment.get().then(function(data) {

					var shipping = data.payer.payer_info.shipping_address;

                document.querySelector('#recipient').innerText = shipping.recipient_name;
                document.querySelector('#address').innerText     = shipping.line1;
                document.querySelector('#city').innerText      = shipping.city;
                document.querySelector('#state').innerText     = shipping.state;
                document.querySelector('#zip').innerText      = shipping.postal_code;
				});
            }, 

			onCancel: function(data, actions) {
				return window.alert('Payment Cancelled');
			},

			onError: function(data, actions) {
				return window.alert('Payment failed. Refresh page and try again.');
			},

        }, '#paypal-button-container');

    </script>
		</div>
